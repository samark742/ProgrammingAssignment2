##  makeCacheMatrix is used to store matrix and and it inverse the value of argument for cacheSolve function. 
## setmat function takes arugument j,which is matrix. setmat assign value to x and clear the value of avg when excetued from cacheSolve
## getmat use lexical scoping by providing value of input matrix if previous cache data is clear.
## setmatinverse function use <<- for providng value to avg in parent enviroment. 
## getmatinverse function get the cache value for the result of inverse matrix using lexical scoping rule.

## mackeChackeMatrix has four functions setmat, getmat,setmatinverse, getmatinverse. These function are in parent enviromment and are called from cacheSolve function.

makeCacheMatrix <- function(x = matrix()) {
        avg<- NULL
        setmat<-function(j){
        x<<-j
        avg<<-NULL
        }
      getmat<-function()x
      setmatinverse<-function(inverse){
              avg<<-inverse } 
        getmatinverse<-function() avg
        list(setmat= setmat,getmat=getmat,setmatinverse=setmatinverse,getmatinverse=getmatinverse)
}


## cacheSolve function has argument of matrix x. It first called the function getmatinverse for cache value of avg.
## if value of avg is not NULL then it show meaasge " getting cached data" else it calculate the inverse of matrix and return the result.
cacheSolve <- function(x, ...) {
        avg<-x$getmatinverse()
if(!is.null(avg)){
  message("getting cached data")
  return(avg)
}
         data<-x$getmat() 
        avg<-solve(data,...)
        x$setmatinverse(avg)
        avg
        ## Return a matrix that is the inverse of 'x'
}
